@page "/editproduct/{ProductId:int}"
@layout AdminMainLayout
@using ASMC6.Shared
@using ASMC6.Server.Service
@inject HttpClient httpClient
@inject LocalStorageService _localStorageService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

<AuthorizeView Roles="1" Context="authorizedContext">
    <Authorized Context="authorizedChildContext">
        <div class="row justify-content-center mt-3">
            <div class="col-md-6">
                <div class="card shadow-sm">
                    <div class="card-header bg-danger text-white">
                        <h5 class="text-center mb-0">CHỈNH SỬA SẢN PHẨM</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@prod" OnValidSubmit="EditProd" Context="editFormContext">
                            <DataAnnotationsValidator />
                            <div class="text-danger mb-3">
                                <ValidationSummary />
                            </div>

                            <div class="form-group">
                                <label for="Name" class="control-label"><strong>Tên sản phẩm</strong></label>
                                <input id="Name" @bind="prod.Name" class="form-control" placeholder="Nhập Tên" />
                                <ValidationMessage For="@(() => prod.Name)" />
                            </div>

                            <div class="form-group">
                                <label for="MenuId" class="control-label"><strong>Menu ID</strong></label>
                                <input id="MenuId" type="text" @bind="prod.MenuId" class="form-control" placeholder="Nhập Menu ID" />
                                <ValidationMessage For="@(() => prod.MenuId)" />
                            </div>

                            <div class="form-group">
                                <label for="CategoryId" class="control-label"><strong>Category ID</strong></label>
                                <input id="CategoryId" type="text" @bind="prod.CategoryId" class="form-control" placeholder="Nhập Category ID" />
                                <ValidationMessage For="@(() => prod.CategoryId)" />
                            </div>

                            <div class="form-group">
                                <label for="Image" class="control-label"><strong>Ảnh sản phẩm</strong></label>
                                <input id="Image" type="file" class="form-control-file"/>
                                <small class="form-text text-muted">Chọn một tệp hình ảnh để tải lên.</small>
                                <ValidationMessage For="@(() => prod.Image)" />
                            </div>

                            <div class="form-group">
                                <label for="Price" class="control-label"><strong>Giá sản phẩm</strong></label>
                                <input id="Price" type="number" @bind="prod.Price" class="form-control" placeholder="Nhập giá sản phẩm" />
                                <ValidationMessage For="@(() => prod.Price)" />
                            </div>

                            <div class="form-group">
                                <label for="Description" class="control-label"><strong>Ghi chú</strong></label>
                                <input id="Description" type="text" @bind="prod.Description" class="form-control" placeholder="Nhập ghi chú" />
                                <ValidationMessage For="@(() => prod.Description)" />
                            </div>

                            <div class="form-group">
                                <label for="IsDelete" class="control-label"><strong>Is Delete</strong></label>
                                <input id="IsDelete" type="checkbox" @bind="prod.IsDelete" class="form-control" />
                                <ValidationMessage For="@(() => prod.IsDelete)" />
                            </div>

                            <div class="form-group text-center">
                                <div class="d-flex justify-content-center">
                                    <button type="submit" class="btn btn-danger mx-2">Cập Nhật</button>
                                    <a href="/adminproductmanage" class="btn btn-secondary mx-2">Quay Về</a>
                                </div>
                            </div>
                        </EditForm>
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success mt-3">
                                @successMessage
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>Không có quyền truy cập</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private string errorMessage;
    private string successMessage;
    private ASMC6.Shared.Product prod = new ASMC6.Shared.Product();
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        if (ProductId > 0)
        {
            await LoadEditProduct(ProductId);
        }
    }

    private async Task LoadEditProduct(int id)
    {
        try
        {
            var response = await httpClient.GetAsync($"api/Product/GetProducts/{id}");
            if (response.IsSuccessStatusCode)
            {
                prod = await response.Content.ReadFromJsonAsync<ASMC6.Shared.Product>();
            }
            else
            {
                errorMessage = $"Không tìm thấy sản phẩm với ID {id}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải sản phẩm: {ex.Message}";
        }
    }

    private async Task EditProd()
    {
        try
        {
            // Handle image upload if a file is selected
            if (selectedFile != null)
            {
                var resizedImageFile = await selectedFile.RequestImageFileAsync("image/jpeg", 300, 500);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var content = new MultipartFormDataContent();
                content.Add(new ByteArrayContent(buffer), "file", selectedFile.Name);

                var uploadResponse = await httpClient.PostAsync("api/Product/UploadImage", content);
                if (uploadResponse.IsSuccessStatusCode)
                {
                    // Assuming the server returns the URL of the uploaded image
                    prod.Image = await uploadResponse.Content.ReadAsStringAsync();
                }
                else
                {
                    errorMessage = "Lỗi khi tải lên hình ảnh";
                    return;
                }
            }

            var response = await httpClient.PutAsync($"api/Product/{prod.ProductId}", JsonContent.Create(prod));

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Cập nhật thành công!";
                errorMessage = string.Empty;
                Navigation.NavigateTo("/adminproductmanage");
            }
            else
            {
                errorMessage = "Lỗi khi cập nhật sản phẩm";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
        }

        StateHasChanged();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
}
